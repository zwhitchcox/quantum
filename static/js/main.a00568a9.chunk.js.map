{"version":3,"sources":["constants.ts","L0_WaveParticleDuality/Both.tsx","L0_WaveParticleDuality/Particles.tsx","L0_WaveParticleDuality/Water.tsx","L0_WaveParticleDuality/WaveParticleDuality.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NORD","Both","wave","ctx","canvas","canvasRef","useRef","animate","clearRect","width","height","strokeStyle","lineWidth","beginPath","moveTo","clientHeight","i","clientWidth","x","y","Math","sin","amplitude","lineTo","stroke","fillStyle","ellipse","PI","useEffect","current","getContext","length","speed","requestAnimationFrame","ref","className","Particles","ball","A","loopTimer","mouse","isDown","getMousePosition","e","pageX","offsetLeft","pageY","offsetTop","mouseDown","which","position","mouseUp","velocity","loop","Fx","abs","Fy","isNaN","ax","mass","ay","radius","restitution","save","translate","arc","fill","closePath","restore","onmousemove","onmousedown","onmouseup","setInterval","frameRate","clearInterval","Water","time","xOffset","WaveParticleDuality","navLinks","to","txt","App","path","map","key","Boolean","window","location","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a00568a9.chunk.js","sourcesContent":["export const NORD = {\n  color0: '#2e3440',\n  color1: '#3b4252',\n  color2: '#434c5e',\n  color3: '#4c566a',\n  color4: '#d8dee9',\n  color5: '#e5e9f0',\n  color6: '#eceff4',\n  red:    '#bf616a',\n  orange: '#d08770',\n  yellow: '#ebcb8b',\n  green1:  '#a3be8c',\n  green2: '#8FBCBB',\n  purple: '#b48ead',\n  blue1: '#88C0D0',\n  blue2: '#81A1C1',\n  blue3: '#5E81AC',\n}\n","import { NORD } from '../constants'\nimport React, { useEffect, useRef, useState } from 'react'\n\nconst Both = () => {\n  let wave, ctx, theta, canvas;\n  const canvasRef:any = useRef()\n  const requestRef:any = useRef()\n  const previousTimeRef:any = useRef()\n  // const animate = time => {\n  //   if (previousTimeRef.current != undefined) {\n  //     const deltaTime = time - previousTimeRef.current\n  //     setCount(prevCount => (prevCount + deltaTime * .01) % 100)\n  //   }\n  //   previousTimeRef.current = time\n  //   requestRef.current = requestAnimationFrame(animate)\n  // }\n\n  const animate = () => {\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    ctx.strokeStyle= NORD.blue1\n    ctx.lineWidth = 3\n\n    // draw wave\n    ctx.beginPath()\n    ctx.moveTo(0, canvas.clientHeight / 2)\n    for (let i = 0; i < canvas.clientWidth / 2; i++) {\n        const x = i\n        const y = wave.y + Math.sin(i *200000) * wave.amplitude\n        ctx.lineTo(x, y)\n    }\n    ctx.stroke()\n\n    // draw particle\n    ctx.beginPath()\n    ctx.fillStyle= NORD.blue1\n    ctx.ellipse(canvas.clientWidth / 4 * 3, canvas.clientHeight / 2, 2, 2, 0, 0, Math.PI * 2)\n    ctx.stroke()\n    // requestAnimationFrame(animate)\n  }\n\n  // useEffect(() => {\n  //   requestRef.current = requestAnimationFrame(animate)\n  //   return () => cancelAnimationFrame(requestRef.current)\n  //   // if (typeof canvasRef === \"undefined\" )\n  //   //   return\n  // }, [])\n  useEffect(() => {\n    if (typeof canvasRef === \"undefined\")\n      return\n    canvas = canvasRef.current\n    ctx = canvas.getContext(\"2d\")\n    wave = {\n      y: canvas.clientHeight / 2,\n      length: 200000,\n      amplitude: canvas.clientHeight / 4,\n      speed: .01\n    }\n    theta = 0;\n    requestAnimationFrame(animate)\n  }, [canvasRef])\n\n  return (\n    <canvas width=\"944\" height=\"300\" ref={canvasRef} className=\"both\" />\n  )\n}\n\nexport default Both","import React, { useEffect, useRef } from 'react'\n\n\nconst Particles = () => {\n  let width, ctx, height, canvas, ball, A;\n  const canvasRef:any = useRef()\n  const frameRate = 1/40; // Seconds\n  const frameDelay = frameRate * 1000; // ms\n  let loopTimer:any = false;\n\n\n  const Cd = 0.47;  // Dimensionless\n  const rho = 1.22; // kg / m^3\n  const ag = 9.81;  // m / s^2\n  const mouse = {x: 0, y: 0, isDown: false};\n\n  function getMousePosition(e) {\n      mouse.x = e.pageX - canvas.offsetLeft;\n      mouse.y = e.pageY - canvas.offsetTop;\n  }\n  const mouseDown = function(e) {\n      if (e.which == 1) {\n          getMousePosition(e);\n          mouse.isDown = true;\n          ball.position.x = mouse.x;\n          ball.position.y = mouse.y;\n      }\n  }\n  const mouseUp = function(e) {\n      if (e.which == 1) {\n          mouse.isDown = false;\n          ball.velocity.y = (ball.position.y - mouse.y) /10;\n          ball.velocity.x = (ball.position.x - mouse.x) / 10;\n      }\n  }\n  var loop = function() {\n      if ( ! mouse.isDown) {\n          // Do physics\n              // Drag force: Fd = -1/2 * Cd * A * rho * v * v\n          var Fx = -0.5 * Cd * A * rho * ball.velocity.x * ball.velocity.x * ball.velocity.x / Math.abs(ball.velocity.x);\n          var Fy = -0.5 * Cd * A * rho * ball.velocity.y * ball.velocity.y * ball.velocity.y / Math.abs(ball.velocity.y);\n\n          Fx = (isNaN(Fx) ? 0 : Fx);\n          Fy = (isNaN(Fy) ? 0 : Fy);\n\n              // Calculate acceleration ( F = ma )\n          var ax = Fx / ball.mass;\n          var ay = ag + (Fy / ball.mass);\n              // Integrate to get velocity\n          ball.velocity.x += ax*frameRate;\n          ball.velocity.y += ay*frameRate;\n\n              // Integrate to get position\n          ball.position.x += ball.velocity.x*frameRate*100;\n          ball.position.y += ball.velocity.y*frameRate*100;\n      }\n      // Handle collisions\n      if (ball.position.y > height - ball.radius) {\n          ball.velocity.y *= ball.restitution;\n          ball.position.y = height - ball.radius;\n      }\n      if (ball.position.x > width - ball.radius) {\n          ball.velocity.x *= ball.restitution;\n          ball.position.x = width - ball.radius;\n      }\n      if (ball.position.x < ball.radius) {\n          ball.velocity.x *= ball.restitution;\n          ball.position.x = ball.radius;\n      }\n      // Draw the ball\n\n\n      ctx.clearRect(0,0,width,height);\n\n      ctx.save();\n\n      ctx.translate(ball.position.x, ball.position.y);\n      ctx.beginPath();\n      ctx.arc(0, 0, ball.radius, 0, Math.PI*2, true);\n      ctx.fill();\n      ctx.closePath();\n\n      ctx.restore();\n\n\n\n      // Draw the slingshot\n      if (mouse.isDown) {\n          ctx.beginPath();\n          ctx.moveTo(ball.position.x, ball.position.y);\n          ctx.lineTo(mouse.x, mouse.y);\n          ctx.stroke();\n          ctx.closePath();\n      }\n\n  }\n  useEffect(() => {\n    if (typeof canvasRef === \"undefined\")\n      return\n    canvas = canvasRef.current\n    ctx = canvas.getContext(\"2d\")\n    width = canvas.clientWidth\n    height = canvas.clientHeight\n    ball = {\n      position: {x: width/2, y: 0},\n      velocity: {x: 10, y: 0},\n      mass: 0.1, //kg\n      radius: 15, // 1px = 1cm\n      restitution: -0.7\n    }\n    A = Math.PI * ball.radius * ball.radius / (10000); // m^2\n\n    canvas.onmousemove = getMousePosition;\n    canvas.onmousedown = mouseDown;\n    canvas.onmouseup = mouseUp;\n\n    ctx.fillStyle = 'red';\n    ctx.strokeStyle = '#000000';\n    loopTimer = setInterval(loop, frameDelay);\n    return () => clearInterval(loopTimer)\n  }, [])\n  return (\n    <canvas width=\"944\" height=\"300\" ref={canvasRef} className=\"particles\" />\n  )\n}\n\nexport default Particles","import { NORD } from '../constants'\nimport React, { useEffect, useRef, useState } from 'react'\n\nconst Water = () => {\n  let wave, ctx, canvas;\n  let prevTime = 0;\n\n  const canvasRef:any = useRef()\n  const requestRef:any = useRef()\n  const previousTimeRef:any = useRef()\n  // const animate = time => {\n  //   if (previousTimeRef.current != undefined) {\n  //     const deltaTime = time - previousTimeRef.current\n  //     setCount(prevCount => (prevCount + deltaTime * .01) % 100)\n  //   }\n  //   previousTimeRef.current = time\n  //   requestRef.current = requestAnimationFrame(animate)\n  // }\n\n\n  const animate = (time) => {\n    const deltaSeconds = (time - prevTime) / 1000\n    const distancePerSecond = 400;\n    const xOffset = deltaSeconds*distancePerSecond\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    ctx.strokeStyle= NORD.blue1\n    ctx.lineWidth = 3\n    const frequency = 40\n\n    // draw wave\n    ctx.beginPath()\n    let x = 0;\n    while (x <= canvas.clientWidth*4) {\n      const y = canvas.clientHeight/2 + 80 * Math.sin((x+xOffset)/frequency);\n      ctx.lineTo(x, y)\n      x++\n    }\n    ctx.stroke()\n    requestAnimationFrame(animate)\n  }\n\n  // useEffect(() => {\n  //   requestRef.current = requestAnimationFrame(animate)\n  //   return () => cancelAnimationFrame(requestRef.current)\n  //   // if (typeof canvasRef === \"undefined\" )\n  //   //   return\n  // }, [])\n  useEffect(() => {\n    if (typeof canvasRef === \"undefined\")\n      return\n    canvas = canvasRef.current\n    ctx = canvas.getContext(\"2d\")\n    wave = {\n      y: canvas.clientHeight / 2,\n      length: 200000,\n      amplitude: canvas.clientHeight / 4,\n      speed: .01\n    }\n    requestAnimationFrame(animate)\n  }, [canvasRef])\n\n  return (\n    <canvas width=\"944\" height=\"300\" ref={canvasRef} className=\"water\" />\n  )\n}\n\nexport default Water","import React from 'react'\nimport Both from './Both';\nimport Particles from './Particles';\nimport Water from './Water';\nimport \"./WaveParticleDuality.scss\"\n\nconst WaveParticleDuality = () => {\n  return (\n    <div>\n      <h2>Wave-Particle Duality</h2>\n      <p>\n        In order to understand wave-particle duality, we need to first understand what we mean by \"waves\" and \"particles\".\n      </p>\n      <Both />\n      <p>\n        Particles are exactly what we think of when we think of \"classical\" objects. They bounce of things, run into each other, and are solid, physical objects.\n      </p>\n      <Particles />\n      <p>\n        Waves are a bit more complicated. A wave is a periodic disturbance in some medium. For instance in water, waves move the water up and down. But the wave isn't the water. The wave is the disturbance of the water.\n      </p>\n      <Water />\n    </div>\n  )\n}\n\nexport default WaveParticleDuality","import React from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport WaveParticleDuality from './L0_WaveParticleDuality/WaveParticleDuality';\n\nconst navLinks = [\n  {\n    to: \"/wave-particle-duality\",\n    txt: 'Wave-Particle Duality'\n  }\n]\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <Link to=\"/\">\n          <h1>Learn Quantum Physics</h1>\n        </Link>\n      </header>\n      <div className=\"App-body\">\n        <main>\n          <Switch>\n            <Route path=\"/wave-particle-duality\">\n              <WaveParticleDuality />\n            </Route>\n            <Route path=\"/\">\n              Home\n            </Route>\n          </Switch>\n        </main>\n        <nav>\n          <ul>\n            {navLinks.map(({to, txt}, i) => (\n              <li key={to}>\n                <Link to={to}>\n                  0. {txt}\n                </Link>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n      <footer>footer</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-snapshot'\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}